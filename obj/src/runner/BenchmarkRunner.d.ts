import { ResultCallback } from './ResultCallback';
import { MessageCallback } from './MessageCallback';
import { ExecutionState } from './ExecutionState';
import { ExecutionType } from './ExecutionType';
import { MeasurementType } from './MeasurementType';
import { BenchmarkResult } from './BenchmarkResult';
import { BenchmarksManager } from './benchmarks/BenchmarksManager';
import { ParametersManager } from './parameters/ParametersManager';
import { BenchmarkProcess } from './execution/BenchmarkProcess';
import { ReportGenerator } from './results/ReportGenerator';
import { EnvironmentManager } from './environment/EnvironmentManager';
export declare class BenchmarkRunner {
    private _benchmarks;
    private _parameters;
    private _process;
    private _reportGenerator;
    private _environment;
    private _resultUpdatedListeners;
    private _messageSentListeners;
    private _errorReportedListeners;
    constructor();
    readonly parameters: ParametersManager;
    readonly process: BenchmarkProcess;
    readonly benchmarks: BenchmarksManager;
    readonly reportGenerator: ReportGenerator;
    readonly environment: EnvironmentManager;
    measurementType: MeasurementType;
    nominalRate: number;
    executionType: ExecutionType;
    duration: number;
    forceContinue: boolean;
    readonly results: BenchmarkResult[];
    addResultUpdatedListener(listener: ResultCallback): void;
    removeResultUpdatedListener(listener: ResultCallback): void;
    notifyResultUpdated(status: ExecutionState, result: BenchmarkResult): void;
    addMessageSentListener(listener: MessageCallback): void;
    removeMessageSentListener(listener: MessageCallback): void;
    notifyMessageSent(message: string): void;
    addErrorReportedListener(listener: MessageCallback): void;
    removeErrorReportedListener(listener: MessageCallback): void;
    notifyErrorReported(message: string): void;
    readonly running: boolean;
    start(): void;
    stop(): void;
    run(callback: () => void): void;
    generateReport(): string;
    saveReportToFile(fileName: string): void;
}
